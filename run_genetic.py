from genetic import *
from setup import *
from utils import *

def test0():
    reachable_points = [np.array([0, 0, 4.5]), np.array([0, 0, 1.5]), np.array([0, 0, 2.5]), np.array([0, 0, 3.5])]

    def constraint(point):
        return False
    
    d = {"n":(True, (2, 3)),
         "joints": [1],
         "L": (True, 1),
         "Bs": (True),
         "Be": (False, constraint),
         "e": reachable_points,
         "M": (False, 5),
         "S": (False, 0.5)
    }

    basis = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]

    origin = [0, 0, 1]

    shapes = []

    base = Base(Cube([0.0, 0.0, 0.5], [0.0, 0.0, 1.0], [2.0, 2.0, 1.0]))

    limits = [-4, 4, -4, 4, 0, 8]

    current_best =  [1, 2, 0.16965787750747918, 3.6388607074176975, 1, 2, 4.061885722973873, 4.716251613262816]


    return reachable_points, constraint, d, base, origin, basis, shapes, limits, current_best

def test1():
    x, y, z = generate_complex_closed_loop(50)
    reachable_points = [np.array([3*x[i], 3*y[i], 10*z[i]+5]) for i in range(len(x))]

    c = Sphere([0, 0, 5], 5)

    def constraint(point):
        return not c.check_point_inside(point)
    
    d = {"n":(False, (7, 7)),
         "joints": [0],
         "L": (True, 1),
         "Bs": (True),
         "Be": (True, constraint),
         "e": reachable_points,
         "M": (True, 5),
         "S": (True, 0.5)
    }

    basis = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]

    origin = [0, 0, 1]

    shapes = [c]

    base = Base(Cube([0.0, 0.0, 0.5], [0.0, 0.0, 1.0], [2.0, 2.0, 1.0]))

    limits = [-4, 4, -4, 4, 0, 8]

    current_best = [0, 2, 1.339645344801965, 2, 0, 1, 2.9057872843942794, 1, 0, 1, 0.2107503823854029, 2, 0, 2, 2.1716887518847203, 2, 0, 1, 2.175358306201688, 0, 0, 0, 2.3559038732328643, 0, 0, 4.807510714829135, 2, 1]


    return reachable_points, constraint, d, base, origin, basis, shapes, limits, current_best

def test2():

    # Generate and print the trajectory
    x1, y1, z1 = generate_trajectory("spiral", 0.7, 0.7, 1, 3, 3, 3, 25)
    x2, y2, z2 = generate_trajectory("sinusoidal", 2, 2, 2, 2, 3, 4, 25)
    #Concatenate
    x = np.concatenate((x1, x2))*0.4
    y = np.concatenate((y1, y2))*0.4
    z = np.concatenate((z1-5, z2-2))*0.4

    reachable_points = np.array([np.array([x[i], y[i], z[i]]) for i in range(len(x))])

    c1 = SemiSphere([0, 0, 0], [0, 0, -1], 2)
    p1 = Plane([0, 0, 1], [0, 0, 0])

    shapes = [c1, p1]

    def constraint(point):
        return not (c1.check_point_inside(point) or p1.check_point_above(point))

    base = Base(Cube([-5.0, 0.0, 5], [0.0, 1.0, 0], [2.0, 1.0, 2.0]))

    d = {"n":(True, (8, 13)),
            "joints": [0, 0, 0, 0, 0, 1, 2],
            "L": (True, 1),
            "Bs": (True),
            "Be": (True, constraint),
            "e": reachable_points,
            "M": (True, 5),
            "S": (True, 0.5)
        }
    
    origin = [-4.5, 0.0, 5]

    basis = [[1, 0, 0], [0, 0, 1], [0, -1, 0]]
    
    limits = [-5, 5, -5, 5, -2.5, 7.5]

    current_best = [[0, 2, 2.318370561475824, 1, 0, 0, 6.109210158048678, 0, 0, 1, 4.251377834369909, 1, 0, 0, 7.605481336457454, 1, 0, 2, 1, 2, 0, 2, 2.135180502979755, 2, 0, 1, 0.35293997867030136, 1, 0, 2, 7.883688653683159, 0, 0, 1, 5.867051107996216, 1],
                    [2, 0, 0, 2.5559508116813583, 0.18103974934087352, 0, 0, 0.1851488412692862, 1, 0, 1, 3.9460357629906997, 1, 0, 1, 1.5540269599214693, 0, 0, 1, 4.573945430892495, 1, 0, 0, 6.977783649866006, 2, 0, 2, 4.9607179961168235, 0, 0, 1, 6.097613332041942, 1, 0, 2, 0.5347138940695431, 1],
                    [0, 2, 2.318370561475824, 1, 0, 0, 6.109210158048678, 0, 1, 0, 1, 3.9460357629906997, 1, 0, 1, 1.5540269599214693, 0, 0, 1.1516421869722977, 2, 0, 2, 2.135180502979755, 2, 0, 1, 0.35293997867030136, 1, 0, 2, 7.883688653683159, 0, 0, 1, 5.867051107996216, 1],
                    [0, 0, 1.8552559011858514, 2, 2, 1, 1, 2.295078018252006, 0.19739829895323058, 0, 1, 3.04094638334771, 1, 1, 1, 0.9244225606123277, 0.5415361452715606, 0, 2, 1.1430465831613017, 1, 1, 1, 0.7811440396206427, 6.709354160017388, 0, 1, 7.868080494371349, 1, 0, 0, 7.929097452464988, 1]]

    return reachable_points, constraint, d, base, origin, basis, shapes, limits, current_best[-1]

    

def test3():
    # Generate and print the trajectory
    x1, y1, z1 = generate_trajectory("spiral", 0.7, 0.7, 1, 3, 3, 3, 25)
    x2, y2, z2 = generate_trajectory("sinusoidal", 2, 2, 2, 2, 3, 4, 25)
    #Concatenate
    z = np.concatenate((x1, x2))*0.4-1
    y = np.concatenate((y1, y2))*0.4
    x = np.concatenate((z1-5, z2-2))*0.4-5

    reachable_points = np.array([np.array([x[i], y[i], z[i]]) for i in range(len(x))])

    # Example usage:
    c1 = SemiSphere([-5, 0, -1], [-1, 0, 0], 2)
    p1 = Plane([1, 0, 0], [-5, 0, -1])

    shapes = [c1, p1]

    def constraint(point):
        return not (c1.check_point_inside(point) or p1.check_point_above(point))

    base = Base(Cube([2.0, 0.0, 6.0], [0.0, 0.0, -1.0], [2.0, 2.0, 1.0]))

    d = {"n":(True, (8, 13)),
        "joints": [0, 0, 0, 0, 0, 2, 2],
        "L": (True, 2),
        "Bs": (True),
        "Be": (True, constraint),
        "e": reachable_points,
        "M": (True, 5),
        "S": (True, 0.5)
    }
    
    origin = [2.0, 0.0, 5.5]

    basis = [[0, 0, -1], [-1, 0, 0], [0, 1, 0]]
    
    limits = [-5, 5, -5, 5, -2.5, 7.5]

    current_best = [[0, 1, 3.6584037557182922, 1, 0, 2, 0.30370848968900643, 0, 0, 1, 5.176098927033638, 1, 0, 1, 0.28910339510128813, 2, 0, 2, 0.48582084728611086, 2, 2, 1, 0, 2.6401816399671536, 0.1970151647202715, 0, 0, 3.8933308481702764, 0, 0, 0, 0.48864495363921173, 2],
                    [0, 2, 2.7325836013577662, 2, 0, 2, 0.21271345300229497, 1, 0, 1, 5.511340742024744, 0, 0, 0, 6.4633735762219935, 0, 0, 2, 4.35320152825804, 0, 1, 0, 3.532078654552931, 2, 0, 0, 6.019604759562739, 0, 0, 0, 6.299093100735887, 2],
                    [0, 1, 0.6471323072227902, 2, 0, 2, 0.6765703040483142, 1, 0, 0, 4.168089271041191, 0, 0, 2, 0.9606029542088415, 2, 2, 0, 1, 2.291435940759008, 0.17625720744984438, 0, 1, 3.781382008655265, 2, 0, 2, 4.618211089556038, 1, 0, 2, 0.6657383692314913, 1, 0, 1, 3.3806463762031735, 0, 0, 1, 0.9614947901957303, 2, 0, 1, 4.234609747922468, 1],
                    [0, 2, 2.7325836013577662, 2, 0, 2, 0.21271345300229497, 1, 0, 1, 5.511340742024744, 1, 0, 0, 2.767089270941714, 0, 0, 1, 2.405318308880518, 2, 0, 0, 5.836377061771099, 2, 0, 2, 6.226937150931461, 0, 0, 0, 6.299093100735887, 2],
                    [0, 2, 2.7325836013577662, 2, 0, 2, 0.21271345300229497, 1, 0, 1, 5.511340742024744, 0, 0, 0, 6.4633735762219935, 0, 0, 2, 4.35320152825804, 0, 1, 1, 7.035270420582977, 1, 0, 2, 6.745341740703076, 2, 0, 0, 6.299093100735887, 2],
                    [1, 2, 0.9824873712922897, 6.814439447964736, 1, 0, 0.6140548029240197, 0.9380416429115646, 0, 2, 4.3149880578235615, 2, 0, 0, 5.495938213822199, 1, 0, 2, 0.8095825403637701, 1, 0, 1, 2.091266374571766, 2, 1, 2, 0.8464782501227677, 3.6866258638993874, 0, 2, 3.30820258606122, 2, 0, 1, 4.584973438328927, 1],
                    [1, 2, 0.6957163299849137, 2.5072838588060664, 1, 1, 0.6645102425176351, 6.031830010670544, 0, 1, 1.9797584164068205, 0, 0, 2, 2.938122646616516, 0, 0, 2, 0.9654065330163979, 2, 0, 1, 1.5635516854437999, 0, 0, 1, 7.118832609004769, 0, 0, 0, 3.4773959885095436, 2],
                    [0, 2, 1.460751538472959, 2, 0, 0, 4.078053049637625, 0, 0, 0, 5.704099511239126, 1, 2, 2, 0, 2.980079358893459, 0.16650669987318983, 0, 2, 2.87176325884148, 0, 0, 0, 4.583790115758639, 2, 0, 1, 1.5924919532504371, 0, 0, 0, 2, 0, 0, 0, 5.568171349293217, 2, 0, 0, 5.148460265446987, 2, 1, 1, 0.27842275424277346, 4.842349398359738],
                    [1, 2, 0.9824873712922897, 6.814439447964736, 1, 0, 0.6140548029240197, 0.9380416429115646, 0, 0, 7.816701855179069, 2, 0, 0, 4.2461407957024075, 2, 0, 2, 3.7666527963183256, 2, 0, 0, 7.074166778409976, 0, 1, 0, 0.6944657438682352, 6.931548741067124, 1, 0, 3.4773959885095436, 2],
                    [0, 1, 4.773662179364023, 0, 0, 2, 3.058939446656239, 2, 0, 0, 1.7086986120991188, 0, 1, 0, 0.2865553620740428, 1.0532234582312374, 0, 2, 3.752052972129437, 2, 0, 2, 1.6132379727491672, 1, 1, 1, 0.3033033073016347, 6.962988848255456, 0, 0, 3.7097304039905885, 1, 0, 0, 0.7264560371355803, 0, 1, 1, 0.3724043701303781, 1.8224652270102826, 1, 2, 0.3005218149532333, 0.6722790467341473, 0, 1, 7.781946192838057, 0],
                    [0, 0, 2.8934943698651945, 2, 0, 0, 3.469533359071133, 2, 0, 0, 2.135334777996146, 1, 0, 1, 7.125249400006185, 0, 0, 0, 3.011579812823492, 2, 0, 2, 0.39084816002751466, 2, 0, 1, 4.68988816238075, 2, 0, 2, 1.6978758298196233, 2, 0, 2, 2.3274237337490797, 0, 1, 2, 0.3939462987814468, 4.576501856076293, 1, 2, 2, 0, 0, 2.1700056260597984, 0.15612603171423264],
                    [0, 2, 0.6957163299849137, 0, 0, 2, 2.9955900564711566, 0, 0, 0, 7.816701855179069, 1, 2, 2, 0, 2.980079358893459, 0.16650669987318983, 0, 2, 2.87176325884148, 0, 0, 0, 4.583790115758639, 2, 0, 1, 1.5924919532504371, 0, 0, 0, 2, 0, 0, 0, 5.568171349293217, 2, 0, 0, 5.148460265446987, 2, 1, 1, 0.27842275424277346, 4.842349398359738],
                    [1, 2, 0.6957163299849137, 0, 0, 2, 2.9955900564711566, 0, 0, 0, 7.816701855179069, 2, 0, 0, 2.767089270941714, 0, 0, 1, 2.405318308880518, 2, 0, 0, 5.836377061771099, 0, 1, 2, 0.8464782501227677, 3.6866258638993874, 1, 0, 3.4773959885095436, 2, 0, 1, 4.584973438328927, 1],
                    [0, 0, 3.5813848528703587, 1, 1, 0, 0.6140548029240197, 0.9380416429115646, 0, 0, 7.816701855179069, 2, 0, 0, 4.2461407957024075, 2, 0, 2, 3.7666527963183256, 2, 0, 0, 7.074166778409976, 0, 1, 0, 0.6944657438682352, 6.931548741067124, 0, 2, 3.30820258606122, 2, 0.10351343939824828],
                    [1, 2, 0.9824873712922897, 6.814439447964736, 1, 0, 0.6140548029240197, 0.9380416429115646, 0, 2, 4.3149880578235615, 2, 0, 0, 5.495938213822199, 1, 0, 2, 0.8095825403637701, 1, 0, 1, 2.091266374571766, 2, 1, 2, 0.8464782501227677, 3.6866258638993874, 0, 2, 3.30820258606122, 2, 0, 1, 4.584973438328927, 1],
                    [1, 2, 0.9824873712922897, 6.814439447964736, 0, 0, 3.469533359071133, 2, 0, 0, 2.135334777996146, 1, 0, 1, 7.125249400006185, 0, 0, 0, 3.011579812823492, 2, 0, 2, 0.39084816002751466, 2, 0, 1, 4.68988816238075, 2, 0, 2, 1.6978758298196233, 2, 0, 1, 4.584973438328927, 1],
                    [0, 2, 2.7325836013577662, 2, 0, 2, 0.21271345300229497, 1, 0, 1, 5.511340742024744, 0, 0, 0, 6.4633735762219935, 0, 0, 2, 0.9654065330163979, 2, 0, 1, 7.035270420582977, 1, 0, 2, 6.745341740703076, 2, 0, 0, 6.299093100735887, 2],
                    [1, 2, 0.6957163299849137, 1, 0, 2, 3.058939446656239, 2, 0, 0, 2.135334777996146, 1, 0, 1, 7.125249400006185, 0, 0, 0, 3.011579812823492, 2, 0, 2, 0.39084816002751466, 2, 0, 1, 5.277451910290593, 2, 0, 2, 7.515559074320445, 1, 0, 1, 4.584973438328927, 1],
                    [1, 2, 0.9824873712922897, 6.814439447964736, 1, 0, 0.6140548029240197, 0.9380416429115646, 0, 2, 4.3149880578235615, 2, 0, 0, 5.495938213822199, 1, 0, 2, 0.8095825403637701, 1, 0, 1, 2.091266374571766, 2, 1, 2, 0.8464782501227677, 3.6866258638993874, 0, 2, 3.30820258606122, 2, 0, 1, 4.584973438328927, 1]]
    

    return reachable_points, constraint, d, base, origin, basis, shapes, limits, current_best[0]

def test4():
    # Generate and print the trajectory
    x1, y1, z1 = generate_trajectory("spiral", 0.7, 0.7, 1, 3, 3, 3, 25)
    x2, y2, z2 = generate_trajectory("sinusoidal", 2, 2, 2, 2, 3, 4, 25)
    #Concatenate
    z = np.concatenate((x1, x2))*0.4-1
    y = np.concatenate((y1, y2))*0.4
    x = np.concatenate((z1-5, z2-2))*0.4-5

    reachable_points = np.array([np.array([x[i], y[i], z[i]]) for i in range(len(x))])

    # Example usage:
    c1 = SemiSphere([-5, 0, -1], [-1, 0, 0], 2)
    p1 = Plane([1, 0, 0], [-5, 0, -1])

    shapes = []

    def constraint(point):
        return not (c1.check_point_inside(point) or p1.check_point_above(point))

    base = Base(Cube([2.0, 0.0, 6.0], [0.0, 0.0, -1.0], [2.0, 2.0, 1.0]))

    d = {"n":(False, (7, 7)),
            "joints": [0],
            "L": (True, 2),
            "Bs": (True),
            "Be": (False, constraint),
            "e": reachable_points,
            "M": (True, 5),
            "S": (True, 0.5)
    }
    
    origin = [2.0, 0.0, 5.5]

    basis = [[0, 0, -1], [-1, 0, 0], [0, 1, 0]]
    
    limits = [-5, 5, -5, 5, -2.5, 7.5]

    current_best = [[0, 0, 0, 1, 0, 1, 3.655241470844366, 0, 0, 1, 3.086627116390864, 2, 0, 0, 3.4520417633799756, 2, 0, 1, 0.6738093299865229, 2, 0, 0, 0.6391373743371674, 1, 0, 1, 5.306569616896963, 0],
                    [0, 2, 3.999592761182755, 0, 0, 1, 1.5231907896665386, 0, 0, 2, 0.7771657233790629, 0, 0, 0, 0.45557740903404614, 2, 0, 2, 2.358574632093002, 1, 0, 0, 4.016102593951077, 1, 0, 2, 1.6344245085909312, 2],
                    [0, 2, 0.14802749661649522, 2, 0, 1, 4.316133339657467, 2, 0, 0, 0.4159122842730842, 2, 0, 2, 3.377939838896857, 2, 0, 1, 4.448784761744448, 0, 0, 2, 0.23926991809660367, 2, 0, 0, 2.6499383597986705, 2],
                    [0, 0, 3.7811225242708963, 1, 0, 2, 5.824387836049422, 0, 0, 2, 0.3424647985013542, 2, 0, 1, 4.67931878971203, 0, 0, 1, 0.3467368293725417, 2, 0, 1, 2.5882637728315734, 1, 0, 2, 1.425011930940881, 1]]
    

    return reachable_points, constraint, d, base, origin, basis, shapes, limits, current_best[0]

def test5():
    # Generate and print the trajectory
    x1, y1, z1 = generate_trajectory("spiral", 0.7, 0.7, 1, 3, 3, 3, 25)
    x2, y2, z2 = generate_trajectory("sinusoidal", 2, 2, 2, 2, 3, 4, 25)
    #Concatenate
    z = np.concatenate((x1, x2))*0.4-1
    y = np.concatenate((y1, y2))*0.4
    x = np.concatenate((z1-5, z2-2))*0.4-5

    reachable_points = np.array([np.array([x[i], y[i], z[i]]) for i in range(len(x))])

    # Example usage:
    c1 = SemiSphere([-5, 0, -1], [-1, 0, 0], 2)
    p1 = Plane([1, 0, 0], [-5, 0, -1])

    shapes = []

    def constraint(point):
        return not (c1.check_point_inside(point) or p1.check_point_above(point))

    base = Base(Cube([2.0, 0.0, 6.0], [0.0, 0.0, -1.0], [2.0, 2.0, 1.0]))

    d = {"n":(True, (4, 4)),
            "joints": [0],
            "L": (True, 2),
            "Bs": (True),
            "Be": (False, constraint),
            "e": reachable_points,
            "M": (True, 5),
            "S": (True, 0.5)
    }
    
    origin = [2.0, 0.0, 5.5]

    basis = [[0, 0, -1], [-1, 0, 0], [0, 1, 0]]
    
    limits = [-5, 5, -5, 5, -2.5, 7.5]

    current_best = [[0, 2, 3.7985137504178668, 0, 0, 1, 3.70129330372036, 2, 0, 0, 3.287767043436472, 1, 0, 2, 0.24493811107253177, 0, 0, 1, 0.5154287684915483, 2, 0, 0, 5.036812068940583, 2],
                    [0, 0, 0.48872019019633833, 0, 0, 0, 0.3683658513680776, 2, 0, 0, 0.5997897611774081, 2, 0, 0, 0.44580169054465707, 0, 0, 1, 0.4708380046247995, 1, 0, 0, 4.461234895759455, 1, 0, 2, 0.3895373664972085, 2, 0, 1, 5.017985199390913, 0, 0, 1, 0.4870568422943568, 1],
                    [0, 2, 0.274956300850386, 1, 0, 0, 0.41030381981953146, 1, 0, 2, 4.512732130952768, 0, 0, 2, 0.5044089719518164, 2, 0, 0, 0.43860553218105713, 0, 0, 1, 5.684790947964505, 2, 0, 2, 0.40370334812268704, 0, 0, 1, 0.40688271949648275, 1],
                    [0, 0, 0.48872019019633833, 0, 0, 0, 0.3683658513680776, 2, 0, 0, 0.5997897611774081, 2, 0, 0, 0.44580169054465707, 0, 0, 1, 5.8695143159938565, 0, 0, 2, 0.5809783046605099, 2, 0, 0, 0.5909192133061749, 1, 0, 1, 5.017985199390913, 0, 0, 1, 0.4870568422943568, 1],
                    [0, 0, 0, 1, 0, 1, 3.655241470844366, 0, 0, 1, 3.086627116390864, 2, 0, 0, 3.4520417633799756, 2, 0, 1, 0.6738093299865229, 2, 0, 0, 0.6391373743371674, 1, 0, 1, 5.306569616896963, 0],
                    [0, 2, 3.999592761182755, 0, 0, 1, 1.5231907896665386, 0, 0, 2, 0.7771657233790629, 0, 0, 0, 0.45557740903404614, 2, 0, 2, 2.358574632093002, 1, 0, 0, 4.016102593951077, 1, 0, 2, 1.6344245085909312, 2],
                    [0, 2, 0.14802749661649522, 2, 0, 1, 4.316133339657467, 2, 0, 0, 0.4159122842730842, 2, 0, 2, 3.377939838896857, 2, 0, 1, 4.448784761744448, 0, 0, 2, 0.23926991809660367, 2, 0, 0, 2.6499383597986705, 2],
                    [0, 0, 3.7811225242708963, 1, 0, 2, 5.824387836049422, 0, 0, 2, 0.3424647985013542, 2, 0, 1, 4.67931878971203, 0, 0, 1, 0.3467368293725417, 2, 0, 1, 2.5882637728315734, 1, 0, 2, 1.425011930940881, 1]]
    
    # # n = 1
    # best = [0, 2, 10.15, 1, 0, 0, 0, 0]

    # # n = 3
    # # post genetic
    # best = [0, 0, 3.441174940250291, 2, 0, 1, 5.3204734127769076, 2, 0, 0, 3.776524392300439, 1, 0, 0, 3.15464640730804, 0]
    # # post gradient
    # best = [0, 0, 3.36377341, 2, 0, 1, 5.20022402, 2, 0, 0, 3.68822596, 1, 0, 0, 3.15464641, 0]

    # # n = 20
    # best = [0, 2, 0.5928755692036095, 0, 0, 1, 0.6215442580639716, 0, 0, 2, 0.6735793442521797, 1, 0, 1, 0.591386134830185, 1, 0, 2, 0.6061376260513119, 0, 0, 1, 0.6762307904092691, 0, 0, 1, 0.6672834813722851, 2, 0, 1, 0.6453043185318746, 0, 0, 2, 0.6065871429323044, 1, 0, 1, 0.5505386228350546, 1, 0, 2, 0.5595355463722366, 0, 0, 0, 0.5361404629883306, 2, 0, 1, 0.6629011489700181, 0, 0, 2, 0.6286315862658709, 1, 0, 1, 0.6829896015172222, 1, 0, 2, 0.6682021153784315, 0, 0, 2, 0.6447327008060615, 0, 0, 1, 0.5684619448198561, 0, 0, 2, 0.5812781369617711, 1, 0, 1, 0.5966063784877741, 1, 0, 2, 0.5154501870932535, 0]

    # n = 15
    # best = [0, 2, 0.802855698696421, 0, 0, 1, 0.7647720559166099, 0, 0, 2, 0.7532650632302461, 1, 0, 1, 0.771401931111945, 1, 0, 2, 0.8899927880501113, 0, 0, 1, 0.7577011364059965, 0, 0, 1, 0.8804504967247847, 2, 0, 1, 0.7536707865040521, 0, 0, 2, 0.8092327162505161, 1, 0, 1, 0.7767051124589784, 1, 0, 2, 0.8904279954462448, 0, 0, 0, 0.767160206581499, 2, 0, 1, 0.8452362461571494, 0, 0, 2, 0.7556122674194877, 1, 0, 1, 0.859832680517848, 1, 0, 2, 0.8970224514520413, 0]

    # n =10
    # best = [0, 2, 1.2719729401111735, 0, 0, 1, 1.2993972369308584, 0, 0, 2, 1.0944081617658092, 1, 0, 1, 1.1329388292200362, 1, 0, 2, 1.153539949996358, 0, 0, 1, 1.0156579208903582, 0, 0, 1, 1.0727559940967888, 2, 0, 1, 1.1993647294241403, 0, 0, 2, 1.0543907317803487, 1, 0, 1, 1.1152193546583467, 1, 0, 2, 1.0523418430534455, 0]
    
    

    return reachable_points, constraint, d, base, origin, basis, shapes, limits, current_best[0]


def main():
    gen = False
    grad = False
    check = False
    env = False
    reachable_points, constraint, d, base, origin, basis, shapes, limits, best = test2()

    average_point = np.mean(reachable_points, axis=0)
    print("Average point: ", average_point)
    distance = np.linalg.norm(average_point - origin)
    print("Distance from origin: ", distance)

    if check:
        for b in best:
            display(b, reachable_points, constraint, base, origin, basis, shapes, limits, no = True, points = True, ani=True)
    if gen:
        best = genetic_algorithm(d, base, origin, basis, alpha_n=1)
    if grad:
        best = gradient(best, d, base, origin, basis, alpha_n=1)
    if env:
        best = [0, 0, 0, 0, 0, 0, 0, 0]

    print("Best: ", best)

    display(best, reachable_points, constraint, base, origin, basis, shapes, limits, no = False, points = True, ani=True)

if __name__ == "__main__":
    main()